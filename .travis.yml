language: go

# Forces travis to use VM insted container, required to be able to build containers.
sudo: required

services:
    - docker
    - mongodb

# Golang version matrix
go:
    - 1.8

env:
    global:
        # Binary name to be uploaded to github releases
        - GITHUB_RELEASE_BINARY=mender-cli
        - GITHUB_RELEASE_DEPLOY_REPO=mendersoftware/mender-cli
        - GLOBAL_VISIBLE_IN_DEPLOY=some_global_var

        # - GITHUB_RELEASE_TOKEN=''

    # Run test task(s) and platform/arch builds separately
    matrix:
        - JOB_TYPE=compile_and_basic_tests
        - JOB_TYPE=deploy GOARCH=amd64 GOOS=linux
        - JOB_TYPE=deploy GOARCH=amd64 GOOS=darwin

before_install:
    - go get -u github.com/fzipp/gocyclo

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG


    - echo $GLOBAL_VISIBLE_IN_DEPLOY
    - echo $GOOS
    - echo $GOARCH

    # Test if code was formatted with 'go fmt'
    # Command will format code and return modified files
    # fail if any have been modified.
    - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi

    # Perform static code analysys
    - go vet `go list ./... | grep -v vendor`

    # Fail builds when the cyclomatic complexity reaches 15 or more
    - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`

script:
    - if [ "$JOB_TYPE" = compile_and_basic_tests ] && [ -z $TRAVIS_TAG ]; then
        go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $?;
      fi

    # Only build platform/os releases on deploy, and if we're tagging
    - if [ "$JOB_TYPE" = deploy ]  && [ -n $TRAVIS_TAG ]; then
        CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o "$GITHUB_RELEASE_BINARY.$GOOS.$GOARCH" -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`";
        ls -la;
      fi

deploy:
    # Push to github releases upon tagging.
    -
        provider: releases
        api_key: $GITHUB_RELEASE_TOKEN
        file: $GITHUB_RELEASE_BINARY.$GOOS.$GOARCH
        skip_cleanup: true
        on:
            repo: $GITHUB_RELEASE_DEPLOY_REPO
            tags: true
            all_branches: true
